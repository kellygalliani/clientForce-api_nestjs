// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String        @id
  name      String
  password  String
  createdAt DateTime
  isAdmin   Boolean
  avatar    String?
  isActive  Boolean
  email     UserEmail[]
  phone     UserPhone[]
  contacts  UserContact[]

  @@map("users")
}

model UserEmail {
  id        String  @id @default(uuid())
  email     String  @unique
  user_id   String
  user      User    @relation(fields: [user_id], references: [id], onDelete: Cascade)
  isPrimary Boolean

  @@map("users_email")
}

model UserPhone {
  id      String @id @default(uuid())
  phone   String
  user_id String
  user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("users_phone")
}

model Contact {
  id          String         @id
  name        String
  createdAt   DateTime
  emails      ContactEmail[]
  phones      ContactPhone[]
  UserContact UserContact[]

  @@map("contacts")
}

model ContactEmail {
  id         String  @id @default(uuid())
  email      String
  contact_id String
  contact    Contact @relation(fields: [contact_id], references: [id], onDelete: Cascade)

  @@map("contacts_email")
}

model ContactPhone {
  id         String  @id @default(uuid())
  phone      String
  contact_id String
  contact    Contact @relation(fields: [contact_id], references: [id], onDelete: Cascade)

  @@map("contacts_phone")
}

model UserContact {
  id         String  @id @default(uuid())
  user_id    String
  user       User    @relation(fields: [user_id], references: [id], onDelete: Cascade)
  contact_id String
  contact    Contact @relation(fields: [contact_id], references: [id], onDelete: Cascade)

  @@map("users_contacts")
}
